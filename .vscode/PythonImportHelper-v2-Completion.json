[
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "importlib.util",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "importlib.util",
        "description": "importlib.util",
        "detail": "importlib.util",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "urllib.request",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "urllib.request",
        "description": "urllib.request",
        "detail": "urllib.request",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "pyimporter.importer",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pyimporter.importer",
        "description": "pyimporter.importer",
        "detail": "pyimporter.importer",
        "documentation": {}
    },
    {
        "label": "module",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "module",
        "description": "module",
        "detail": "module",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "setup",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "find_packages",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "pyimporter.cli",
        "description": "pyimporter.cli",
        "peekOfCode": "def main():\n    args = sys.argv[1:]\n    if not args:\n        print(\"Usage: pyget install <user/repo@version/module_path>\")\n        return\n    cmd = args[0]\n    if cmd == \"install\":\n        if len(args) == 2:\n            install_module(args[1])\n        elif len(args) == 4 and \"as\" in args:",
        "detail": "pyimporter.cli",
        "documentation": {}
    },
    {
        "label": "ensure_dirs",
        "kind": 2,
        "importPath": "pyimporter.common",
        "description": "pyimporter.common",
        "peekOfCode": "def ensure_dirs():\n    PYGET_HOME.mkdir(parents=True, exist_ok=True)\n    CACHE_DIR.mkdir(parents=True, exist_ok=True)\ndef get_custom_registry_url():\n    if CUSTOM_REGISTRY_PATH.exists():\n        return CUSTOM_REGISTRY_PATH.read_text().strip()\n    return \"https://raw.githubusercontent.com\"",
        "detail": "pyimporter.common",
        "documentation": {}
    },
    {
        "label": "get_custom_registry_url",
        "kind": 2,
        "importPath": "pyimporter.common",
        "description": "pyimporter.common",
        "peekOfCode": "def get_custom_registry_url():\n    if CUSTOM_REGISTRY_PATH.exists():\n        return CUSTOM_REGISTRY_PATH.read_text().strip()\n    return \"https://raw.githubusercontent.com\"",
        "detail": "pyimporter.common",
        "documentation": {}
    },
    {
        "label": "PYGET_HOME",
        "kind": 5,
        "importPath": "pyimporter.common",
        "description": "pyimporter.common",
        "peekOfCode": "PYGET_HOME = Path.home() / \".pyget\"\nCACHE_DIR = PYGET_HOME / \"cache\"\nREGISTRY_PATH = PYGET_HOME / \"registry.json\"\nCUSTOM_REGISTRY_PATH = PYGET_HOME / \"registry.txt\"\ndef ensure_dirs():\n    PYGET_HOME.mkdir(parents=True, exist_ok=True)\n    CACHE_DIR.mkdir(parents=True, exist_ok=True)\ndef get_custom_registry_url():\n    if CUSTOM_REGISTRY_PATH.exists():\n        return CUSTOM_REGISTRY_PATH.read_text().strip()",
        "detail": "pyimporter.common",
        "documentation": {}
    },
    {
        "label": "CACHE_DIR",
        "kind": 5,
        "importPath": "pyimporter.common",
        "description": "pyimporter.common",
        "peekOfCode": "CACHE_DIR = PYGET_HOME / \"cache\"\nREGISTRY_PATH = PYGET_HOME / \"registry.json\"\nCUSTOM_REGISTRY_PATH = PYGET_HOME / \"registry.txt\"\ndef ensure_dirs():\n    PYGET_HOME.mkdir(parents=True, exist_ok=True)\n    CACHE_DIR.mkdir(parents=True, exist_ok=True)\ndef get_custom_registry_url():\n    if CUSTOM_REGISTRY_PATH.exists():\n        return CUSTOM_REGISTRY_PATH.read_text().strip()\n    return \"https://raw.githubusercontent.com\"",
        "detail": "pyimporter.common",
        "documentation": {}
    },
    {
        "label": "REGISTRY_PATH",
        "kind": 5,
        "importPath": "pyimporter.common",
        "description": "pyimporter.common",
        "peekOfCode": "REGISTRY_PATH = PYGET_HOME / \"registry.json\"\nCUSTOM_REGISTRY_PATH = PYGET_HOME / \"registry.txt\"\ndef ensure_dirs():\n    PYGET_HOME.mkdir(parents=True, exist_ok=True)\n    CACHE_DIR.mkdir(parents=True, exist_ok=True)\ndef get_custom_registry_url():\n    if CUSTOM_REGISTRY_PATH.exists():\n        return CUSTOM_REGISTRY_PATH.read_text().strip()\n    return \"https://raw.githubusercontent.com\"",
        "detail": "pyimporter.common",
        "documentation": {}
    },
    {
        "label": "CUSTOM_REGISTRY_PATH",
        "kind": 5,
        "importPath": "pyimporter.common",
        "description": "pyimporter.common",
        "peekOfCode": "CUSTOM_REGISTRY_PATH = PYGET_HOME / \"registry.txt\"\ndef ensure_dirs():\n    PYGET_HOME.mkdir(parents=True, exist_ok=True)\n    CACHE_DIR.mkdir(parents=True, exist_ok=True)\ndef get_custom_registry_url():\n    if CUSTOM_REGISTRY_PATH.exists():\n        return CUSTOM_REGISTRY_PATH.read_text().strip()\n    return \"https://raw.githubusercontent.com\"",
        "detail": "pyimporter.common",
        "documentation": {}
    },
    {
        "label": "URLModuleLoader",
        "kind": 6,
        "importPath": "pyimporter.importer",
        "description": "pyimporter.importer",
        "peekOfCode": "class URLModuleLoader:\n    def __init__(self):\n        self.registry = self._load_registry()\n    def _load_registry(self):\n        if not REGISTRY_PATH.exists():\n            return {}\n        import json\n        return json.loads(REGISTRY_PATH.read_text())\n    def find_spec(self, fullname, path, target=None):\n        if fullname not in self.registry:",
        "detail": "pyimporter.importer",
        "documentation": {}
    },
    {
        "label": "load_registry",
        "kind": 2,
        "importPath": "pyimporter.registry",
        "description": "pyimporter.registry",
        "peekOfCode": "def load_registry():\n    if REGISTRY_PATH.exists():\n        return json.loads(REGISTRY_PATH.read_text())\n    return {}\ndef save_registry(data):\n    REGISTRY_PATH.write_text(json.dumps(data, indent=2))\ndef parse_spec(arg):\n    \"\"\"\n    Format:\n    - user/repo@branch/path/to/module.py",
        "detail": "pyimporter.registry",
        "documentation": {}
    },
    {
        "label": "save_registry",
        "kind": 2,
        "importPath": "pyimporter.registry",
        "description": "pyimporter.registry",
        "peekOfCode": "def save_registry(data):\n    REGISTRY_PATH.write_text(json.dumps(data, indent=2))\ndef parse_spec(arg):\n    \"\"\"\n    Format:\n    - user/repo@branch/path/to/module.py\n    - user/repo@branch/path/to/module.py as alias\n    \"\"\"\n    alias = None\n    if \" as \" in arg:",
        "detail": "pyimporter.registry",
        "documentation": {}
    },
    {
        "label": "parse_spec",
        "kind": 2,
        "importPath": "pyimporter.registry",
        "description": "pyimporter.registry",
        "peekOfCode": "def parse_spec(arg):\n    \"\"\"\n    Format:\n    - user/repo@branch/path/to/module.py\n    - user/repo@branch/path/to/module.py as alias\n    \"\"\"\n    alias = None\n    if \" as \" in arg:\n        arg, alias = arg.rsplit(\" as \", 1)\n        alias = alias.strip()",
        "detail": "pyimporter.registry",
        "documentation": {}
    },
    {
        "label": "build_url",
        "kind": 2,
        "importPath": "pyimporter.registry",
        "description": "pyimporter.registry",
        "peekOfCode": "def build_url(user, repo, branch, path):\n    base = get_custom_registry_url()\n    if base:\n        return f\"{base.rstrip('/')}/{user}/{repo}/{branch}/{path}\"\n    return f\"https://raw.githubusercontent.com/{user}/{repo}/{branch}/{path}\"\ndef ensure_pymod():\n    if not PYMOD_PATH.exists():\n        print(\"[pyget] py.mod not found, creating...\")\n        PYMOD_PATH.write_text(\n            \"[project]\\nname = \\\"pyget_project\\\"\\nversion = \\\"0.1.0\\\"\\n\\n[dependencies]\\n\"",
        "detail": "pyimporter.registry",
        "documentation": {}
    },
    {
        "label": "ensure_pymod",
        "kind": 2,
        "importPath": "pyimporter.registry",
        "description": "pyimporter.registry",
        "peekOfCode": "def ensure_pymod():\n    if not PYMOD_PATH.exists():\n        print(\"[pyget] py.mod not found, creating...\")\n        PYMOD_PATH.write_text(\n            \"[project]\\nname = \\\"pyget_project\\\"\\nversion = \\\"0.1.0\\\"\\n\\n[dependencies]\\n\"\n        )\ndef install_module(arg, _alias=None):\n    try:\n        user, repo, branch, path, parsed_alias = parse_spec(arg)\n    except ValueError as e:",
        "detail": "pyimporter.registry",
        "documentation": {}
    },
    {
        "label": "install_module",
        "kind": 2,
        "importPath": "pyimporter.registry",
        "description": "pyimporter.registry",
        "peekOfCode": "def install_module(arg, _alias=None):\n    try:\n        user, repo, branch, path, parsed_alias = parse_spec(arg)\n    except ValueError as e:\n        print(f\"[pyget] Error parsing spec: {e}\")\n        return\n    filename = Path(path).name\n    modulename = filename.replace(\".py\", \"\")\n    aliasname = parsed_alias or _alias or modulename\n    url = build_url(user, repo, branch, path)",
        "detail": "pyimporter.registry",
        "documentation": {}
    },
    {
        "label": "install_from_pymod",
        "kind": 2,
        "importPath": "pyimporter.registry",
        "description": "pyimporter.registry",
        "peekOfCode": "def install_from_pymod():\n    if not PYMOD_PATH.exists():\n        print(\"[pyget] py.mod not found\")\n        return\n    lines = PYMOD_PATH.read_text().splitlines()\n    in_dependencies = False\n    for line in lines:\n        line = line.strip()\n        if line == \"[dependencies]\":\n            in_dependencies = True",
        "detail": "pyimporter.registry",
        "documentation": {}
    },
    {
        "label": "list_modules",
        "kind": 2,
        "importPath": "pyimporter.registry",
        "description": "pyimporter.registry",
        "peekOfCode": "def list_modules():\n    reg = load_registry()\n    if not reg:\n        print(\"[pyget] No modules installed.\")\n        return\n    for name, path in reg.items():\n        print(f\"{name} => {path}\")\ndef remove_module(name):\n    reg = load_registry()\n    if name in reg:",
        "detail": "pyimporter.registry",
        "documentation": {}
    },
    {
        "label": "remove_module",
        "kind": 2,
        "importPath": "pyimporter.registry",
        "description": "pyimporter.registry",
        "peekOfCode": "def remove_module(name):\n    reg = load_registry()\n    if name in reg:\n        path = Path(reg[name])\n        if path.exists():\n            path.unlink()\n        del reg[name]\n        save_registry(reg)\n        print(f\"[pyget] Removed {name}\")\n        if PYMOD_PATH.exists():",
        "detail": "pyimporter.registry",
        "documentation": {}
    },
    {
        "label": "set_registry",
        "kind": 2,
        "importPath": "pyimporter.registry",
        "description": "pyimporter.registry",
        "peekOfCode": "def set_registry(url):\n    CUSTOM_REGISTRY_PATH.write_text(url.strip())\n    print(f\"[pyget] Registry set to: {url}\")",
        "detail": "pyimporter.registry",
        "documentation": {}
    },
    {
        "label": "PYMOD_PATH",
        "kind": 5,
        "importPath": "pyimporter.registry",
        "description": "pyimporter.registry",
        "peekOfCode": "PYMOD_PATH = Path.cwd() / \"py.mod\"\ndef load_registry():\n    if REGISTRY_PATH.exists():\n        return json.loads(REGISTRY_PATH.read_text())\n    return {}\ndef save_registry(data):\n    REGISTRY_PATH.write_text(json.dumps(data, indent=2))\ndef parse_spec(arg):\n    \"\"\"\n    Format:",
        "detail": "pyimporter.registry",
        "documentation": {}
    }
]